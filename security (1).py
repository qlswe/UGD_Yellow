from telebot import TeleBot
from pyTelegramBotCAPTCHA import CaptchaManager
import time
from telebot import types
import requests
import json
import psutil
import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


bot = TeleBot('TOKEN_BOTFATHER')
API = 'TOKEN_OPENWEATHER'
captcha_manager = CaptchaManager(bot.get_me().id)



#@bot.message_handler(func=lambda message: True, content_types=['sticker'])
#def handle_sticker(msg):
    #bot.delete_message(msg.chat.id, msg.message_id)
    #bot.send_message(msg.chat.id, "‚ö†Ô∏èÔ∏è–≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –∫–æ–¥–æ–º")



@bot.message_handler(commands=['report'])
def handle_report(message):
    if message.reply_to_message is None:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.')
    else:
        report_message = message.reply_to_message
        report_message_link = f"https://t.me/{message.chat.username}/{report_message.message_id}"
        bot.send_message('ID_ADMIN',f'–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {report_message_link}\n–ü—Ä–∏—á–∏–Ω–∞: {message.text.split(" ", 1)[1]}')
        bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω—ã!')


@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å")
def nas(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üî´|{tag1} —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª(-–∞) {tag2}', parse_mode='markdown')


# Message handler for new chat members
@bot.message_handler(content_types=["new_chat_members"])
def new_member(message):
  for new_user in message.new_chat_members:
    captcha_manager.restrict_chat_member(bot, message.chat.id, new_user.id)
    captcha_manager.send_new_captcha(bot, message.chat, new_user)

# Callback query handler
@bot.callback_query_handler(func=lambda callback:True)
def on_callback(callback):
  captcha_manager.update_captcha(bot, callback)

#Handler for correct solved CAPTCHAs
@captcha_manager.on_captcha_correct
def on_correct(captcha):
  bot.send_message(captcha.chat.id, "Congrats! You solved the CAPTCHA!")
  captcha_manager.unrestrict_chat_member(bot, captcha.chat.id, captcha.user.id)
  captcha_manager.delete_captcha(bot, captcha)

# Handler for wrong solved CAPTCHAs
@captcha_manager.on_captcha_not_correct
def on_not_correct(captcha):
  if (captcha.incorrect_digits == 1 and captcha.previous_tries < 2):
    captcha_manager.refresh_captcha(bot, captcha)
  else:
    bot.kick_chat_member(captcha.chat.id, captcha.user.id)
    bot.send_message(captcha.chat.id, f"{captcha.user.first_name} failed solving the CAPTCHA and was banned!")
    captcha_manager.delete_captcha(bot, captcha)

#¬†Handler for timed out CAPTCHAS
@captcha_manager.on_captcha_timeout
def on_timeout(captcha):
  bot.kick_chat_member(captcha.chat.id, captcha.user.id)
  bot.send_message(captcha.chat.id, f"{captcha.user.first_name} did not solve the CAPTCHA and was banned!")
  captcha_manager.delete_captcha(bot, captcha)


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–∫–æ—Ä–º–∏—Ç—å")
def eda(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü•Ñ|{tag1} —Ç–µ–±—è –ø–æ–∫—Ä–º–∏–ª(-–∞) —Å –ª–æ–∂–æ—á–∫–∏ {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å")
def poc(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®|{tag1} —Ç–µ–±—è –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è")
def pok(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëã|{tag1} –ø–æ–ø—Ä–æ—â–∞–ª—Å—è —Å {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–≥–ª–∞–¥–∏—Ç—å")
def pogl(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëã|{tag1}–ø–æ–≥–ª–∞–¥–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ—Ö–æ—Ä–æ–Ω–∏—Ç—å")
def pohoron(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f' ü™¶|{tag1}–ø–æ—Ö–æ—Ä–æ–Ω–∏–ª(-a){tag2}) ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ø–∏—Ç—å —á–∞–π")
def chai(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üçµ|{tag1} –ø–æ–ø–∏–ª(-–∞) —á–∞–π —Å {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É–¥–∞—Ä–∏—Ç—å")
def udar(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëä|{tag1} —É–¥–∞—Ä–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É–±–∏—Ç—å")
def udit(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'‚ò†Ô∏è|{tag1} —É–±–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–æ—Ç—Å–æ—Å–∞—Ç—å")
def command_text_dela(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëÖÔ∏è|{tag1} –æ—Ç—Å–æ—Å–∞–ª(-–∞) —É {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É—Ç–æ–ø–∏—Ç—å")
def command_text_del(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üö∞Ô∏è|{tag1} –∂–µ—Å—Ç–æ–∫–æ —É—Ç–æ–ø–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
def command_text_priv(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'|{tag1} –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–æ–±–Ω—è—Ç—å")
def sos(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü§ó|{tag1} –æ–±–Ω—è–ª(-–∞) {tag2} ',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–æ—Ç–ª–∏–∑–∞—Ç—å")
def sosif(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëÖ|{tag1} –û—Ç–ª–∏–∑–∞–ª —É {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–∑–∞–ø–µ—Ä–µ—Ç—å")
def sosi(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üîê|{tag1} –∑–∞–∫—Ä—ã–ª(-–∞) –≤ –∫–ª–µ—Ç–∫–µ {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—Å–∂–µ—á—å")
def sosino(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üî•|{tag1} —Å–∂—ë–≥ {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–Ω—é—Ö–∞—Ç—å")
def sosik(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëÉüèª|{tag1} –ø–æ–Ω—É—Ö–∞–ª(-–∞) {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É—â–∏–ø–Ω—É—Ç—å")
def sosir(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü§èüèª|{tag1} —É—â–∏–ø–Ω—É–ª(-–∞){tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–≤—ä–µ–±–∞—Ç—å")
def sossss(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü§ï|{tag1}–í—ä–µ–±–∞–ª(-–∞) —Å–æ –≤—Å–µ–π —Å–∏–ª—ã {tag2}',  parse_mode='markdown')



@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–ø –∫–æ–º–∞–Ω–¥—ã")
def rpcom(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –†–ü –∫–æ–º–∞–Ω–¥: \n1)–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.\n2)–∑–∞–ø–µ—Ä–µ—Ç—å.\n3)–æ–±–Ω—è—Ç—å.\n4)–ø–æ–ø—Ä–∞—â–∞—Ç—å—Å—è.\n5)–ø–æ–ø–∏—Ç—å —á–∞–π.\n6)—É—Ç–æ–ø–∏—Ç—å.\n7)—É–±–∏—Ç—å.\n8)—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å.\n9)–æ—Ç—Å–æ—Å–∞—Ç—å.\n10)–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.\n11)—É—Ç–æ–ø–∏—Ç—å.\n12)–ø–æ–≥–ª–∞–¥–∏—Ç—å.\n13)–ø–æ–∫–æ—Ä–º–∏—Ç—å.\n14)–ø–æ—Ö–æ—Ä–æ–Ω–∏—Ç—å.\n15)–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def send_stats(message):
    bot_info = bot.get_me()
    subscribers = bot.get_chat_members_count(message.chat.id)
    text = f'Bot Name: {bot_info.first_name}\nUsername: @{bot_info.username}\nSubscribers:{subscribers}'
    bot.send_message(message.chat.id, text)



@bot.message_handler(commands=['version'])
def version(message):
   bot.reply_to(message, 'python version: 3.10 Version bot:2.1 changes:[#f7d632a](https://github.com/qlswe/UGD_Yellow2.0/commit/f7d632a07bb6f637992c7ca8da92b0306a5eb7c8)', parse_mode='Markdown')


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEKFNJk4h9cKutDx33CspIddPVgidb4mwACfBIAAvGYMUunL614YVTCCDAE")
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.\n\n[üóû–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞.](https://t.me/ugd_dev)\n\n[üîê–ö–∞–Ω–∞–ª —Å –ª–æ–≥–∞–º–∏ –±–æ—Ç–∞.](https://t.me/ugd_log)", parse_mode='Markdown')
    chat_id = message.chat.id
    button_text = "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç"
    button_url = f"https://telegram.me/{bot.get_me().username}?startgroup=true"
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.add(InlineKeyboardButton(text=button_text, url=button_url))
    bot.send_message(chat_id,  "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", reply_markup=inline_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ CPU –∏ RAM
def system_status():
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    total_memory = round(memory.total / (1024.0 ** 3), 2)
    available_memory = round(memory.available / (1024.0 ** 3), 2)
    used_memory = round(memory.used / (1024.0 ** 3), 2)
    memory_percent = memory.percent



    return f"CPU: {cpu_percent}%\n" \
           f"RAM: {used_memory} GB / {total_memory} GB ({memory_percent}%)\n" \
           f"Available RAM: {available_memory} GB"


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
@bot.message_handler(commands=['status'])
def send_status(message):
    sys_status = system_status()
    bot.reply_to(message, f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n{sys_status}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ Windows
def get_users():
    users = []
    for user in psutil.users():
        if user.name not in users:
            users.append(user.name)
    return users


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /users
@bot.message_handler(commands=['users'])
def send_users(message):
    users = get_users()
    if users:
        reply_text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ:\n"
        for user in users:
            reply_text += f"{user}\n"
        bot.reply_to(message, reply_text)
    else:
        bot.reply_to(message, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")


@bot.message_handler(commands=['yandex'])
def yandex(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="Yandex", url="https://yandex.ru/")
    keyboard.add(url_button)
    bot.send_photo(message.chat.id, "https://cdn-st2.rtr-vesti.ru/vh/pictures/hd/160/365/7.jpg")
    bot.send_message(message.chat.id, "–ò—à–∏ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ:_)", reply_markup=keyboard)


@bot.message_handler(commands=['off'])
def off(message):
    bot.reply_to(message, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ...")
    bot.reply_to(message, "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤—Ä–∞.")
    bot.reply_to(message, "–ì–æ—Ç–æ–≤–æ‚òëÔ∏è")
    bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time()+86400)
    exit()


@bot.message_handler(commands=['rules'])
def rules(message):
    bot.reply_to(message, "–ù–∞–ø–∏—à–∏ /P1 —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞.")


@bot.message_handler(commands=['P1'])
def P1(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä 1:ü•≥üëã–ü–µ—Ä–≤–æ–µ –∏ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±—ã—Ç—å –¥—Ä—É–∂–Ω—ã–º–∏ –∏ –Ω–µ —Å–ø–æ—Ä–∏—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —á–∞—Ç–∞.–°–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P2\n")


@bot.message_handler(commands=['P2'])
def P2(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä 2:‚ö†Ô∏è‚õîÔ∏è–ù–µ —Ñ–ª—É–¥–∏—Ç—å, —Å–ø–∞–º–∏—Ç—å.–°–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P3\n")


@bot.message_handler(commands=['P3'])
def P3(message):
    bot.reply_to(message, "–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä 3:ü§¨–Ω–µ –º–∞—Ç–µ—Ä–∏—Ç—Å—è.(–≤—Å–µ –º–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–æ—Ç–æ–º)C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P4.\n")


@bot.message_handler(commands=['P4'])
def P4(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 4:üì¥–ù–µ –≤—ã–∫–ª—é—á–∞—Ç—å –∏ –Ω–µ –ª–æ–º–∞—Ç—å –±–æ—Ç–∞C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P5.\n")


@bot.message_handler(commands=['P5'])
def P5(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä 5:üòú–ì–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–µ–º —è–∑—ã–∫–µ.–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏:—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π/–±–µ–ª–∞—Ä—É—Å—Å–∫–∏–π.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P6.\n")


@bot.message_handler(commands=['P6'])
def P6(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 6:üö´–ù–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞(–∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤—Å–µ –≤–∏–¥—ã —Ä–µ–∫–ª–∞–º—ã).C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P7.\n")


@bot.message_handler(commands=['P7'])
def P7(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 7:üí≠–†–∞–∑–≤–æ–¥ –Ω–∞ –¥–µ–Ω—å–≥–∏ –∏ —Ç.–¥ –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª  /P8.\n")


@bot.message_handler(commands=['P8'])
def P8(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 8: üî• –ù–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ä–∞—Å–æ–≤—ã–º, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–º –∏–ª–∏ –ø–æ–ª–∏—Ç. —Ä–æ–∑–∂–∏–≥–æ–º. (—Å–≤–∞—Å—Ç–∏–∫–∞ —Ç–æ–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–∞). –¢–∞–∫–∂–µ –¥–ª—è –æ–¥–∞—Ä—ë–Ω–Ω—ã—Ö, –Ω–∞–∑—ã–≤–∞—Ç—å –∞—Ñ—Ä–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Ü–∞ '–Ω–µ–≥—Ä' - —Ç–æ–∂–µ —Ä–∞—Å–∏–∑–º.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P9.\n")


@bot.message_handler(commands=['P9'])
def P9(message):
    bot.reply_to(message, "–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª P9:–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P10 ")



@bot.message_handler(commands=['P10'])
def P10(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 10:üîû–ù–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å  —Å—Ç–∏–∫–µ—Ä—ã 18+ –õ—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∑–∞–ø—Ä–µ—â—ë–Ω, –¥–∞–∂–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P11\n")


@bot.message_handler(commands=['P11'])
def P11(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 11:¬©Ô∏è–ù–µ–ª—å–∑—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∞—É–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P12.\n")


@bot.message_handler(commands=['P12'])
def P12(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 12:üë©‚Äçüë¶–ù–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ä–æ–¥–Ω—ã—Ö.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P13\n")


@bot.message_handler(commands=['P13'])
def P13(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 13:üí¢‚ùå–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P14.\n")


@bot.message_handler(commands=['P14'])
def P14(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 14:üôÑ–ù–µ –Ω–∞–¥–æ–µ–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P15.\n")


@bot.message_handler(commands=['P15'])
def P15(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 15:üí¢üí£–∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ, –∏–∑-–∑–∞ —á–µ–≥–æ –≤—ã–ª–µ—Ç–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ –≤–∑–ª–æ–º.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P16\n")


@bot.message_handler(commands=['P16'])
def P16(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 16:üöØ–ó–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ –Ω–∏–∫–∏ –ª–∏–±–æ –∑–∞—Å–æ—Ä—è—é—â–∏–µ —á–∞—Ç.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P17.\n")


@bot.message_handler(commands=['P17'])
def P17(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 17:–ù–µ –Ω–∞–¥–æ–µ–¥–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ –ø—É—Å—Ç—è–∫–∞–º.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P18.\n")


@bot.message_handler(commands=['P18'])
def P18(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 18:–Ω–µ —à—É—Ç–∏—Ç—å –Ω–∞–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏(–æ–Ω–∏ –º–æ–≥—É—Ç  –Ω–µ –ø–æ–Ω—è—Ç—å —á—Ç–æ –≤—ã —à—É—Ç–∏—Ç–µ –∏ –º–æ–≥—É—Ç –¥–∞—Ç—å –≤–∞–º –º—É—Ç –∏ –≤–∞–º –±—É–¥–µ—Ç –Ω–µ —Å–º–µ—à–Ω–æ)C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P19.")


@bot.message_handler(commands=['P19'])
def P19(message):
    bot.reply_to(message, "\n–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 19: –Ω–µ —Å–ø–∞–º–∏—Ç—å –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.C–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª /P20.")


@bot.message_handler(commands=['P20'])
def P20(message):
    bot.reply_to(message, "\n–ü–æ–∫–∞ —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –≤—Å–µ.")

@bot.message_handler(commands=['whoami'])
def whoami(message):

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = bot.get_chat_member(chat_id=message.chat.id, user_id=user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user_info.user.first_name
    if user_info.user.last_name is not None:
        user_name += ' '+user_info.user.last_name

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å
    bot.send_message(message.chat.id, f'–í—ã {user_name} ({user_id})')

@bot.message_handler(commands=['ban', '–±–∞–Ω'])
def ban_user(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    if is_user_admin(chat_id, user_id):
        try:
            user_to_ban = message.reply_to_message.from_user.id
            bot.kick_chat_member(chat_id, user_to_ban)
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
        except Exception as e:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# noinspection PyBroadException
@bot.message_handler(commands=['unban'])
def unban_user(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
    if is_user_admin(chat_id, user_id):
        try:
            user_to_unban = message.reply_to_message.from_user.id
            bot.unban_chat_member(chat_id, user_to_unban)
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except Exception as e:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def is_user_admin(chat_id, user_id):
    chat_member = bot.get_chat_member(chat_id, user_id)
    return chat_member.status == "administrator" or chat_member.status == "creator"


@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message, "\n–∫–æ–º–∞–Ω–¥–∞ /kick-—É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã.\n –∫–æ–º–∞–Ω–¥–∞ /ban-–±–ª–æ–∫–∏—Ä—É–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã.\n–∫–æ–º–∞–Ω–¥–∞ /unban-–æ–±—Ä–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ /ban.\n –∫–æ–º–∞–Ω–¥–∞ –ó–∞–ø—Ä–µ—â–∞–µ—Ç –ø–∏—Å–∞—Ç—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è(—Å–∫–æ–ª—å–∫–æ –Ω–∞–∑–∞–Ω–∞—á–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).\n–∫–æ–º–∞–Ω–¥–∞ /unmute-–æ–±—Ä–∞—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–µ /mute.\n—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ª–∏–±–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /weather.\n—Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ .\n—Ñ—É–Ω–∫—Ü–∏—è - —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ—Ç–∏–≤ –º–∞—Ç–∞ –∏ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤ .\n—Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—Ä–µ—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º.\n–∫–æ–º–∞–Ω–¥–∞ /help-–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.\n–∫–æ–º–∞–Ω–¥–∞ /start-–Ω—É —Ç—É—Ç —è –Ω–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞ –æ–±—ä—è—Å–Ω—è—Ç—å.\n–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ø–Ω–¥–µ–∫—Å–∞ /YaGPT.\n–∫–æ–º–∞–Ω–¥–∞ /yandex –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫ –Ø–Ω–¥–µ–∫—Å–∞.\n–∫–æ–º–∞–Ω–¥–∞ /rules –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞(–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è).\n–∫–æ–º–∞–Ω–¥–∞ /version –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞.\n–∫–æ–º–∞–Ω–¥–∞ '—Ä–ø –∫–æ–º–∞–Ω–¥—ã' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –†–ü –∫–æ–º–∞–Ω–¥.\n–∫–æ–º–∞–Ω–¥–∞ /stats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞.\n—Ñ—É–Ω–∫—Ü–∏—è –∫–∞–ø—á–∏.\n –ê –Ω–∞ —ç—Ç–æ–º –ø–æ–∫–∞ –≤—Å–µ.–ë—É–¥—É—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. ")
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ñ–º–∏ —Å—é–¥–∞", url="https://ugdblog.my1.ru")
    keyboard.add(url_button)
    bot.send_message(message.chat.id, "–ü–æ—Å–µ—Ç–∏—Ç—å –º–æ–π –±–ª–æ–≥.", reply_markup=keyboard)

@bot.message_handler(commands=['kick'])
def kick_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status == 'administrator' or user_status == 'creator':
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            bot.kick_chat_member(chat_id, user_id)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.username} –±—ã–ª –∫–∏–∫–Ω—É—Ç.")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–∏–∫–Ω—É—Ç—å.")


@bot.message_handler(commands=['mute', '–º—É—Ç', '–ú—É—Ç', 'warn'])
def muter_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        user_status = bot.get_chat_member(chat_id, user_id).status
        if user_status == 'administrator' or user_status == 'creator':
            bot.reply_to(message, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            duration = 60 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1 –º–∏–Ω—É—Ç–∞
            args = message.text.split()[1:]
            if args:
                try:
                    duration = int(args[0])
                except ValueError:
                    bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
                    return
                if duration < 1:
                    bot.reply_to(message, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    return
                if duration > 144000000000000000000000000000000000000000000000000000000000000000:
                    bot.reply_to(message, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –¥–µ–Ω—å.")
                    return
            bot.restrict_chat_member(chat_id, user_id, until_date=time.time()+duration*60)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –∑–∞–º—É—á–µ–Ω ü§ê –Ω–∞ {duration} –º–∏–Ω—É—Ç –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å.")



@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if message.reply_to_message:
        chat_id = message.chat.id
        user_id = message.reply_to_message.from_user.id
        bot.restrict_chat_member(chat_id, user_id, can_send_messages=True, can_send_media_messages=True, can_send_other_messages=True, can_add_web_page_previews=True)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} —Ä–∞–∑–º—É—á–µ–Ω.–ù–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ª—É—á—à–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —è–∑—ã–∫–æ–º.")
    else:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å.")


@bot.message_handler(commands=['weather'])
def get_weather(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:')


@bot.message_handler(content_types=['text'])
def weather1i(message):
    city = message.text.strip().lower()
    res = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric")
    if res.status_code == 200:
        data = json.loads(res.text)
        temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        lon = data['coord']['lon']
        lat = data['coord']['lat']
        max_temp = data['main']['temp_max']
        min_temp = data['main']['temp_min']
        nebo = data['weather'][0]['main']
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        bot.reply_to(message, f"{time.strftime('%B %d, %Y')}üóì\n"
              f"\n–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞:\n–®–∏—Ä–æ—Ç–∞{lat}\n–î–æ–ª–≥–æ—Ç–∞:{lon}\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}C¬∞üå°\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:{max_temp}C¬∞ü•µ \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp}¬∞Cü•∂\n\nThe state of the sky:{nebo}\n"
              f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%üí¶\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Çüò∂‚Äçüå´Ô∏è\n–í–µ—Ç–µ—Ä: {wind} –º/—Åüí®\n\n"
              f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}üåÖ\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}üåÜ\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}‚òÄÔ∏è\n\n"
              f"\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! –∏–ª–∏ –≤–µ—á–µ—Ä–∞!üçÄ"
              )


bad_words = ['–ü–ª–æ—Ö–æ–µ_—Å–ª–æ–≤–æ']


def check_message(message):
    for word in bad_words:
        if word in message.text.lower():
            return True
    return False


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if check_message(message):
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –±—ã–ª —É–¥–∞–ª–µ–Ω–∏‚ùå –∏–ª–∏  –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚õîÔ∏è–∑–∞ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–±–æ –º–∞—Ç–µ—Ä—â–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    else:
        print(message.text)


bot.infinity_polling(none_stop=True)

