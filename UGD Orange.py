from telebot import TeleBot
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
import os
import sys
import platform
import requests
import pymorphy3
from datetime import datetime
import logging
from pyTelegramBotCAPTCHA import CaptchaManager
import datetime



bot = TeleBot('')
API = ''
morph = pymorphy3.MorphAnalyzer()
captcha_manager = CaptchaManager(bot)


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–∫–æ—Ä–º–∏—Ç—å")
def eda(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü•Ñ|{tag1} —Ç–µ–±—è –ø–æ–∫—Ä–º–∏–ª(-–∞) —Å –ª–æ–∂–æ—á–∫–∏ {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å")
def poc(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®|{tag1} —Ç–µ–±—è –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è")
def pok(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëã|{tag1} –ø–æ–ø—Ä–æ—â–∞–ª—Å—è —Å {tag2}', parse_mode='markdown')



@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å")
def nas(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üî´|{tag1} —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–ª(-–∞) {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–≥–ª–∞–¥–∏—Ç—å")
def pogl(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëã|{tag1}–ø–æ–≥–ª–∞–¥–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ—Ö–æ—Ä–æ–Ω–∏—Ç—å")
def pohoron(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f' ü™¶|{tag1}–ø–æ—Ö–æ—Ä–æ–Ω–∏–ª(-a){tag2}) ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ø–∏—Ç—å —á–∞–π")
def chai(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üçµ|{tag1} –ø–æ–ø–∏–ª(-–∞) —á–∞–π —Å {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É–¥–∞—Ä–∏—Ç—å")
def udar(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëä|{tag1} —É–¥–∞—Ä–∏–ª(-–∞) {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É–±–∏—Ç—å")
def udit(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'‚ò†Ô∏è|{tag1} —É–±–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–æ—Ç—Å–æ—Å–∞—Ç—å")
def command_text_dela(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëÖÔ∏è|{tag1} –æ—Ç—Å–æ—Å–∞–ª(-–∞) —É {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É—Ç–æ–ø–∏—Ç—å")
def command_text_del(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üö∞Ô∏è|{tag1} –∂–µ—Å—Ç–æ–∫–æ —É—Ç–æ–ø–∏–ª(-–∞) {tag2} ', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–≤—ã–µ–±–∞—Ç—å")
def command_text_priv–µ–∫–µ–µ–µ(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'|{tag1} –∂–µ—Å—Ç–æ–∫–æ –Ω–∞–¥—Ä—É–≥–∞–ª—Å—è –≤ –ø–æ—Å—Ç–µ–ª–µ –Ω–∞–¥ {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å")
def command_text_nasil(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üîû|{tag1} –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª(-–∞) {tag2} –≤ –ø–æ—Å—Ç–µ–ª–µ.', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
def command_text_kkkk(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'|{tag1} –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª {tag2}', parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–æ–±–Ω—è—Ç—å")
def sos(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü§ó|{tag1} –æ–±–Ω—è–ª(-–∞) {tag2} ',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–æ—Ç–ª–∏–∑–∞—Ç—å")
def sosif(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëÖ|{tag1} –û—Ç–ª–∏–∑–∞–ª —É {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–∑–∞–ø–µ—Ä–µ—Ç—å")
def sosi(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üîê|{tag1} –∑–∞–∫—Ä—ã–ª(-–∞) –≤ –∫–ª–µ—Ç–∫–µ {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—Å–∂–µ—á—å")
def sosino(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üî•|{tag1} —Å–∂—ë–≥ {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–Ω—é—Ö–∞—Ç—å")
def sosik(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'üëÉüèª|{tag1} –ø–æ–Ω—É—Ö–∞–ª(-–∞) {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—É—â–∏–ø–Ω—É—Ç—å")
def sosir(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü§èüèª|{tag1} —É—â–∏–ø–Ω—É–ª(-–∞){tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "–≤—ä–µ–±–∞—Ç—å")
def sossss(message):
    tag2 = f"[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id})"
    tag1 = f"[{message.from_user.first_name}](tg://user?id={message.from_user.id})"
    bot.reply_to(message, f'ü§ï|{tag1}–í—ä–µ–±–∞–ª(-–∞) —Å–æ –≤—Å–µ–π —Å–∏–ª—ã {tag2}',  parse_mode='markdown')


@bot.message_handler(func=lambda message: message.text.lower() == "—Ä–ø –∫–æ–º–∞–Ω–¥—ã")
def rpcom(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –†–ü –∫–æ–º–∞–Ω–¥: \n1)–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.\n2)–∑–∞–ø–µ—Ä–µ—Ç—å.\n3)–æ–±–Ω—è—Ç—å.\n4)–ø–æ–ø—Ä–∞—â–∞—Ç—å—Å—è.\n5)–ø–æ–ø–∏—Ç—å —á–∞–π.\n6)—É—Ç–æ–ø–∏—Ç—å.\n7)—É–±–∏—Ç—å.\n8)—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å.\n9)–æ—Ç—Å–æ—Å–∞—Ç—å.\n10)–ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.\n11)—É—Ç–æ–ø–∏—Ç—å.\n12)–ø–æ–≥–ª–∞–¥–∏—Ç—å.\n13)–ø–æ–∫–æ—Ä–º–∏—Ç—å.\n14)–ø–æ—Ö–æ—Ä–æ–Ω–∏—Ç—å.\n15)–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å.")


def format_weather(city, data):
    # –°–∫–ª–æ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    parsed = morph.parse(city)[0]
    city_locative = parsed.inflect({'loct'})
    city_name = city_locative.word.capitalize() if city_locative else city.title()

    weather_desc = data['weather'][0]['description'].capitalize()
    temp = round(data['main']['temp'])
    feels_like = round(data['main']['feels_like'])
    temp_min = round(data['main']['temp_min'])
    temp_max = round(data['main']['temp_max'])
    humidity = data['main']['humidity']
    pressure = data['main']['pressure']
    visibility = data.get('visibility', 0) // 1000
    cloudiness = data['clouds']['all']
    wind_speed = data['wind']['speed']
    wind_deg = data['wind'].get('deg', 0)

    sunrise_ts = data['sys']['sunrise']
    sunset_ts = data['sys']['sunset']
    timezone_offset = data['timezone']
    sunrise = datetime.utcfromtimestamp(sunrise_ts + timezone_offset).strftime('%H:%M')
    sunset = datetime.utcfromtimestamp(sunset_ts + timezone_offset).strftime('%H:%M')

    wind_dirs = ['—Å–µ–≤–µ—Ä–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', '—é–∂–Ω—ã–π', '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π', '–∑–∞–ø–∞–¥–Ω—ã–π', '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π']
    wind_dir = wind_dirs[round(wind_deg % 360 / 45) % 8]

    reply = (
        f"**üåç –ü–æ–≥–æ–¥–∞ –≤ {city_name}:**\n\n"
        f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: *{weather_desc}*\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{temp}¬∞C* (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ *{feels_like}¬∞C*)\n"
        f"üîª –ú–∏–Ω–∏–º—É–º: *{temp_min}¬∞C* | üî∫ –ú–∞–∫—Å–∏–º—É–º: *{temp_max}¬∞C*\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: *{humidity}%*\n"
        f"üîΩ –î–∞–≤–ª–µ–Ω–∏–µ: *{pressure} –≥–ü–∞*\n"
        f"üå´ –í–∏–¥–∏–º–æ—Å—Ç—å: *{visibility} –∫–º*\n"
        f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: *{cloudiness}%*\n"
        f"üå¨ –í–µ—Ç–µ—Ä: *{wind_speed} –º/—Å*, {wind_dir}\n"
        f"üåÖ –í–æ—Å—Ö–æ–¥: *{sunrise}* | üåá –ó–∞–∫–∞—Ç: *{sunset}*\n\n"
        f"[üó∫ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –ø–æ–≥–æ–¥—ã](https://openweathermap.org/weathermap?basemap=map&cities=true&layer=temperature&lat={data['coord']['lat']}&lon={data['coord']['lon']}&zoom=10)"
    )
    return reply

@bot.message_handler(commands=['weather'])
def get_weather(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
        return

    city = args[1].strip()
    send_weather(message.chat.id, city)

def send_weather(chat_id, city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        if response.status_code != 200:
            bot.send_message(chat_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        data = response.json()
        text = format_weather(city, data)

        markup = types.InlineKeyboardMarkup()
        refresh_btn = types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_weather:{city}")


        markup.add(refresh_btn)

        bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)

    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n`{e}`", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith("refresh_weather:"))
def refresh_weather(call):
    city = call.data.split(":", 1)[1]
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    send_weather(call.message.chat.id, city)


@bot.message_handler(commands=['help'])
def help_command(message):
    send_help_menu(message.chat.id)

def send_help_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üö´ /kick", callback_data="help_kick"),
        InlineKeyboardButton("üî® /ban", callback_data="help_ban"),
        InlineKeyboardButton("‚ôª /unban", callback_data="help_unban"),
        InlineKeyboardButton("‚ö† /warn", callback_data="help_warn"),
        InlineKeyboardButton("üîá /mute", callback_data="help_mute"),
        InlineKeyboardButton("üîä /unmute", callback_data="help_unmute")
    )

    help_text = (
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:*\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã."
    )

    bot.send_message(chat_id, help_text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("help_") or call.data == "help_back")
def help_callback(call):
    commands_info = {
        "kick": "üö´ *–ö–æ–º–∞–Ω–¥–∞ /kick*\n\n–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        "ban": "üî® *–ö–æ–º–∞–Ω–¥–∞ /ban*\n\n–ù–∞–≤—Å–µ–≥–¥–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç.",
        "unban": "‚ôª *–ö–æ–º–∞–Ω–¥–∞ /unban*\n\n–°–Ω–∏–º–∞–µ—Ç –±–∞–Ω, –ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
        "warn": "‚ö† *–ö–æ–º–∞–Ω–¥–∞ /warn*\n\n–í—ã–¥–∞—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π.",
        "mute": "üîá *–ö–æ–º–∞–Ω–¥–∞ /mute*\n\n–ó–∞–ø—Ä–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        "unmute": "üîä *–ö–æ–º–∞–Ω–¥–∞ /unmute*\n\n–°–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ /mute.",
    }

    if call.data == "help_back":
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        send_help_menu(call.message.chat.id)
        bot.answer_callback_query(call.id)
        return

    command_key = call.data.replace("help_", "")
    if command_key in commands_info:
        text = commands_info[command_key]
        back_markup = InlineKeyboardMarkup()
        back_markup.add(InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="help_back"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=back_markup
        )
        bot.answer_callback_query(call.id)



@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user = message.from_user
    user_mention = f"[{user.first_name}](tg://user?id={user.id})"
    is_private = message.chat.type == "private"

    try:
        bot.delete_message(chat_id, message.message_id)
    except:
        pass

    if is_private:
        greeting_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_mention}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *BotGDX Moderator* ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤.\n\n"
            "üîç –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É `/help`\n"
            "üì¶ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "üì¢ [–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª](https://t.me/BotGDM)\n"
            "üõ° [–õ–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏](https://t.me/BotGD_Moderator_log)"
        )

        invite_btn = InlineKeyboardMarkup()
        invite_btn.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{bot.get_me().username}?startgroup=true")
        )

        bot.send_message(
            chat_id,
            greeting_text,
            parse_mode="Markdown",
            reply_markup=invite_btn
        )

    else:
        group_greeting = (
            f"‚úÖ {user_mention}, –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ!\n\n"
            "üîß –ò—Å–ø–æ–ª—å–∑—É–π `/help`, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.\n"
            "‚öôÔ∏è –Ø –≥–æ—Ç–æ–≤ –∑–∞—â–∏—â–∞—Ç—å –≤–∞—à —á–∞—Ç –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º!"
        )

        bot.send_message(chat_id, group_greeting, parse_mode="Markdown")

    log_message = (
        f"üì• –ö–æ–º–∞–Ω–¥–∞ /start\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention} (`{user.id}`)\n"
        f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {message.chat.type}\n"
        f"üïì –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    log_filename = f"logs/{message.chat.title or user.username or 'private'}_{chat_id}start.log"
    with open(log_filename, "a", encoding="utf-8") as f:
        f.write(log_message + "\n\n")


start_time = time.time()

def format_uptime():
    seconds = int(time.time() - start_time)
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f"{days}–¥ {hours}—á {minutes}–º {seconds}—Å"

def get_last_reboot_time():
    return datetime.datetime.fromtimestamp(start_time).strftime("%Y-%m-%d %H:%M:%S")

@bot.message_handler(commands=["status"])
def status_handler(message):
    chat = message.chat
    user = message.from_user
    members = bot.get_chat_members_count(chat.id)

    chat_type = {
        "private": "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "group": "–ì—Ä—É–ø–ø–∞",
        "supergroup": "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
        "channel": "–ö–∞–Ω–∞–ª"
    }.get(chat.type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    bot_info = bot.get_me()

    text = (
    f"üõ∞Ô∏è <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} (ID: <code>{user.id}</code>)\n"
    f"üÜî <b>–ß–∞—Ç:</b> {chat.title or '–õ–°'} (ID: <code>{chat.id}</code>)\n"
    f"üí¨ <b>–¢–∏–ø —á–∞—Ç–∞:</b> {chat_type}\n"
    f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members}\n\n"
    f"ü§ñ <b>–ë–æ—Ç:</b> {bot_info.first_name} (@{bot_info.username})\n"
    f"üß† <b>–í–µ—Ä—Å–∏—è:</b> beta-2025.1.0, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: <a href='https://github.com/qlswe/UGD_Yellow/commit/7292470fe8ff7ab68bae4912ffc95e080e0c19e5'>*—Ç—ã–∫*</a>\n"
    f"‚öôÔ∏è <b>Python:</b> {platform.python_version()}\n\n"
    f"‚è± <b>–ê–ø—Ç–∞–π–º:</b> {format_uptime()}\n"
    f"üîÅ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:</b> {get_last_reboot_time()}\n"
    f"üïí <b>–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</b> {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    bot.send_message(chat.id, text, parse_mode="HTML")


LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

def log_action(chat, initiator, target, action):
    chat_title = chat.title if chat.title else str(chat.id)
    log_filename = os.path.join(LOG_DIR, f"{chat_title}.log")
    with open(log_filename, "a", encoding="utf-8") as log_file:
        log_file.write(f"[{datetime.now()}] {initiator.first_name} ({initiator.id}) ‚Üí "
                       f"{action} {target.first_name} ({target.id})\n")

@bot.message_handler(commands=['promote'])
def promote_user(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    chat_id = message.chat.id
    initiator = message.from_user
    target = message.reply_to_message.from_user

    if not is_user_admin(chat_id, initiator.id):
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ü–æ–ª–Ω—ã–µ", callback_data=f"promote_full:{chat_id}:{target.id}:{initiator.id}"),
        types.InlineKeyboardButton("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", callback_data=f"promote_restrict:{chat_id}:{target.id}:{initiator.id}"),
        types.InlineKeyboardButton("–¢–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", callback_data=f"promote_pin:{chat_id}:{target.id}:{initiator.id}")
    )
    bot.reply_to(message, f"üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–ª—è {target.first_name}:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("promote_"))
def handle_promote_callback(call):
    parts = call.data.split(":")
    mode, chat_id, target_id, initiator_id = parts[0].replace("promote_", ""), int(parts[1]), int(parts[2]), int(parts[3])

    if call.from_user.id != initiator_id:
        bot.answer_callback_query(call.id, "‚õî –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º.")
        return

    perms = {
        "full": dict(
            can_change_info=True,
            can_delete_messages=True,
            can_invite_users=True,
            can_restrict_members=True,
            can_pin_messages=True,
            can_promote_members=False
        ),
        "restrict": dict(
            can_change_info=False,
            can_delete_messages=True,
            can_invite_users=False,
            can_restrict_members=True,
            can_pin_messages=False,
            can_promote_members=False
        ),
        "pin": dict(
            can_change_info=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=True,
            can_promote_members=False
        )
    }

    try:
        bot.promote_chat_member(chat_id, target_id, **perms[mode])
        bot.edit_message_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [ID:{target_id}](tg://user?id={target_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ä–µ–∂–∏–º–µ *{mode}*.",
            chat_id, call.message.message_id, parse_mode="Markdown"
        )
        log_action(call.message.chat, call.from_user, types.User(id=target_id, first_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), f"PROMOTE ({mode})")
    except Exception as e:
        bot.edit_message_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞.\n–û—à–∏–±–∫–∞: {e}", chat_id, call.message.message_id)

@bot.message_handler(commands=['demote'])
def demote_user(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –µ–≥–æ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    chat_id = message.chat.id
    initiator = message.from_user
    target = message.reply_to_message.from_user

    if not is_user_admin(chat_id, initiator.id):
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        member = bot.get_chat_member(chat_id, target.id)
        if member.status == "creator":
            bot.reply_to(message, "‚ùó –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–∞—Ç–∞.")
            return

        bot.promote_chat_member(chat_id, target.id,
            can_change_info=False,
            can_delete_messages=False,
            can_invite_users=False,
            can_restrict_members=False,
            can_pin_messages=False,
            can_promote_members=False
        )
        bot.reply_to(message,
            f"‚ÑπÔ∏è [{target.first_name}](tg://user?id={target.id}) –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown"
        )
        log_action(message.chat, initiator, target, "DEMOTE")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–û—à–∏–±–∫–∞: {e}")


def setup_logger(chat):
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    filename = f"{chat.title or chat.id}administrator.log".replace(" ", "_")
    log_path = os.path.join(log_dir, filename)
    logger = logging.getLogger(str(chat.id))
    if not logger.handlers:
        handler = logging.FileHandler(log_path, encoding='utf-8')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.setLevel(logging.INFO)
        logger.addHandler(handler)
    return logger

def is_user_admin(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        return False

@bot.message_handler(commands=['ban', '–∑–∞–ø—Ä–µ—Ç'])
def ban_user(message):
    logger = setup_logger(message.chat)
    if not is_user_admin(message.chat.id, message.from_user.id):
        return bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    user_id = message.reply_to_message.from_user.id
    if is_user_admin(message.chat.id, user_id):
        return bot.reply_to(message, "üõ°Ô∏è –ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
    try:
        bot.kick_chat_member(message.chat.id, user_id)
        logger.info(f"{message.from_user.username} –∑–∞–±–∞–Ω–∏–ª {message.reply_to_message.from_user.username} ({user_id})")
        bot.reply_to(message, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ.")

@bot.message_handler(commands=['kick', '–≤—ã–ø–Ω—É—Ç—å'])
def kick_user(message):
    logger = setup_logger(message.chat)
    if not is_user_admin(message.chat.id, message.from_user.id):
        return bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_id = message.reply_to_message.from_user.id
    if is_user_admin(message.chat.id, user_id):
        return bot.reply_to(message, "üõ°Ô∏è –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å –∞–¥–º–∏–Ω–∞.")
    try:
        bot.kick_chat_member(message.chat.id, user_id)
        bot.unban_chat_member(message.chat.id, user_id)  # —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º
        logger.info(f"{message.from_user.username} –∫–∏–∫–Ω—É–ª {message.reply_to_message.from_user.username} ({user_id})")
        bot.reply_to(message, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ.")

@bot.message_handler(commands=['mute', '–º—É—Ç', '—Ç–∏—à–∏–Ω–∞'])
def mute_user(message):
    logger = setup_logger(message.chat)
    if not is_user_admin(message.chat.id, message.from_user.id):
        return bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    user_id = message.reply_to_message.from_user.id
    if is_user_admin(message.chat.id, user_id):
        return bot.reply_to(message, "üõ°Ô∏è –ù–µ–ª—å–∑—è –º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞.")

    args = message.text.split()
    duration = 10
    if len(args) > 1:
        try:
            duration = int(args[1])
        except ValueError:
            return bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /mute 5")
    until = int(time.time() + duration * 60)
    try:
        bot.restrict_chat_member(
            message.chat.id,
            user_id,
            until_date=until,
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False
        )
        logger.info(f"{message.from_user.username} –∑–∞–º—É—Ç–∏–ª {message.reply_to_message.from_user.username} ({user_id}) –Ω–∞ {duration} –º–∏–Ω—É—Ç.")
        bot.reply_to(message, f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ.")

@bot.message_handler(commands=['unmute', '—Ä–∞–∑–º—É—Ç'])
def unmute_user(message):
    logger = setup_logger(message.chat)
    if not is_user_admin(message.chat.id, message.from_user.id):
        return bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_id = message.reply_to_message.from_user.id
    try:
        bot.restrict_chat_member(
            message.chat.id,
            user_id,
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True
        )
        logger.info(f"{message.from_user.username} —Ä–∞–∑–º—É—Ç–∏–ª {message.reply_to_message.from_user.username} ({user_id})")
        bot.reply_to(message, f"üîà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ.")

@bot.message_handler(commands=['unban', '—Ä–∞–∑–±–∞–Ω'])
def unban_user(message):
    logger = setup_logger(message.chat)
    if not is_user_admin(message.chat.id, message.from_user.id):
        return bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    user_id = message.reply_to_message.from_user.id
    try:
        bot.unban_chat_member(message.chat.id, user_id)
        logger.info(f"{message.from_user.username} —Ä–∞–∑–±–∞–Ω–∏–ª {message.reply_to_message.from_user.username} ({user_id})")
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.")

@bot.message_handler(commands=['del', '—É–¥–∞–ª–∏—Ç—å'])
def deletlle_message(message):
    logger = setup_logger(message.chat)
    if not is_user_admin(message.chat.id, message.from_user.id):
        return bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    if not message.reply_to_message:
        return bot.reply_to(message, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")
    try:
        bot.delete_message(message.chat.id, message.reply_to_message.message_id)
        logger.info(f"{message.from_user.username} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message.reply_to_message.message_id} –æ—Ç {message.reply_to_message.from_user.username}")
        bot.reply_to(message, "üóë –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")


if __name__ == "__main__":
    print("Bot is polling...")
    bot.polling(none_stop=True)
